* LLM Tools
** Motivation and Concept
*** Problem with LM Workflows
**** Auto completion
Too low level for LM competence
**** Chat window
Giving the LM the wrong primitives
Even code interpreter has this same problem
**** Both are stifling its ability to help you code
*** Proposed solution
**** Let LMs interact with computers the way you do
***** Shell commands (w/ approval)
***** Text editor commands
Emacs makes this especially easy
Eg) evil-forward-word-end evil-search-forward
**** Incremental automation
Could use function call API + agents to extend
For now just single call, increase as deserved
*** Concretely
**** Accept lm queries and also regular commands
***** Shell
***** Text editor
** Command Line Tool
*** Functionality
Flags: message, chat, read, delete, undo, shell, proglang, list, debug
# Start a new chat with ID "example"
lm --message "Hello" --chat example
# Continue the "example" chat
lm --message "How are you?" --chat example
# Read the full "example" chat history
lm --read example
# Undo the last message in the "example" chat
lm --undo example && lm --read example
# List all current chat IDs
lm --list
# Delete the "example" chat
lm --delete example && lm --list
# Ask for a Python code sample
lm --message "Please succintly write quicksort" --proglang javascript
# Ask for a shell command to list files
lm --message "Please set env var fruit to banana" --shell eshell
# Enable debug mode
lm --debug --message "hello"

*** Relation to ShellGPT
You can also `pip install shell-gpt` for a similar interface
**** Similarities
It has equivalents for message, chat, --shell bash, --proglang python, delete, read
**** Differences
Missing other shell types (eg zshell or fish or eshell, which matters for setting env vars for instance), other programming languages, undo, and multiple chats
I'll get into this later, but multiple chats allows you to keep a piece of the context window static, and only add to the part of the conversation that you expect to change often.
 This is one of the main problems of the chat window workflow

** Emacs Integration Tool
*** call-claude
**** Use region or curson position
**** Prepend text including flags
**** Output choice
***** Replace the region
***** Append beyond the current cursor or region
***** Printing the output (in minibuffer)
***** Adding it to the copy-paste ring
*** Read elisp code demo
*** Org mode next task demo
** VSCode Integration Tool
** Links and Future Work
*** Emacs: https://github.com/scottviteri/llm-tools
*** VSCode: https://cursor.sh
*** Future Work:
**** GPT Function Call API
Especially for emacs functions
Code interpreter for free with python-shell-send-region
**** Agent Loops
Multiple edits in a row, using previous results
Build and cross off TODO lists
